#include <WiFi.h>
#include <RTClib.h>
#include <ThingSpeak.h>
#include <Adafruit_Sensor.h>

//WiFiServer server(80);
RTC_DS1307 rtc;

const char* ssid = "CLARO-B612-B19B";
const char* pass = "familia1055";
WiFiClient client;
unsigned long myChannelNumber=3;
const char* myWriteAPIkey = "DB89IVF0XIR8O9BY";
const char* server = "api.thingspeak.com";

String header;
const int NTC_pin = 32;
const int led_pin = 14;
const int trigPin = 5;
const int echoPin = 18;
float minimumTemperature = 35;
float minimumDistance = 100;
int minimumHour = 7;
int sensorValue = 0;
const float BETA = 3950; 
#define SOUND_SPEED 0.034
long duration;
float distanceCm;

unsigned long currentTime = millis();
unsigned long previousTime = 0;
const long timeoutTime = 2000;

void setup() {
  Serial.begin(9600);

  while (!Serial);
    rtc.begin();

  analogReadResolution(10);
  pinMode(NTC_pin,INPUT);
  pinMode(led_pin,OUTPUT);
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT);

  Serial.print("Conectandose a ");
  Serial.println("Wokwi-GUEST");

  WiFi.begin("Wokwi-GUEST", "", 6);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  /*WiFi.begin("Wokwi-GUEST", "", 6);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }*/

  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  //server.begin();
  Serial.println("Servidor web iniciado.");
  //Wifi.mode(WIFI_STA);
  ThingSpeak.begin(client);
}

void loop() {
  int celsiusValue = analogRead(NTC_pin);
  DateTime now = rtc.now();

  float celsius = 1 / (log(1 / (1023. / celsiusValue - 1)) / BETA + 1.0 / 298.15) - 273.15;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * SOUND_SPEED/2;

  printTime(now);
  printCelsius(celsius);
  printDistance(distanceCm);

  // Escucha a los clientes
  /*WiFiClient client = server.available();
  if (client) {
    Serial.println("New client.");
    // Espera a que el cliente envíe una petición
    while (!client.available()) {
      delay(1);
    }

    // Leer la petición HTTP
    String request = client.readStringUntil('\r');
    Serial.println(request);
    client.flush();

    // Construir la respuesta HTTP
    String response = "HTTP/1.1 200 OK\r\n";
    response += "Content-Type: text/html\r\n";
    response += "Connection: close\r\n\r\n";

    // Agregar los valores de los sensores a la página web
    response += "<html><body>";
    response += "<h1>Sensor Values</h1>";
    response += "<p> Sensor 1 value: ";
    response += celsius;
    response += "</p>";
    response += "<p> Sensor 2 value: ";
    response += distanceCm;
    response += "</p>";
    response += "<p> Sensor 3 value: ";
    response += now.year();
    response += "</p>";
    response += "</body></html>";

    // Enviar la respuesta HTTP al cliente
    client.print(response);
    Serial.println("Client disconnected.");
  }
*/
  setLed(celsius, distanceCm, now);
  delay(1000);

  //ThingSpeak.setField(1, now);
  ThingSpeak.setField(2, celsius);
  ThingSpeak.setField(3, distanceCm);

  int status = ThingSpeak.writeFields(myChannelNumber, myWriteAPIkey);

  if (status == 200) {
    Serial.println("Data sent successfully to ThingSpeak!");
  } else {
    Serial.println("Error sending data to ThingSpeak.");
  }

  delay(60000); // send data every minute
}

void printCelsius(float celsius) {
    // Lectura de temperatura
  Serial.print(", Temperature: ");
  Serial.print(celsius);
  Serial.print(" ℃");
}

void printTime(DateTime now) {
  Serial.print("Date: ");
  Serial.print(now.day(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.year(), DEC);
  Serial.print(" Time: ");
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
}

void printDistance(float distance) {
  Serial.print(" Distance (cm): ");
  Serial.print(distanceCm);
  Serial.println(" cm");
}

void setLed(float celsius, float distance, DateTime now) {
  if(celsius <= minimumTemperature || distance <= minimumDistance || now.hour() >= minimumHour)
    digitalWrite(led_pin, HIGH); 
  else
    digitalWrite(led_pin, LOW);
}
